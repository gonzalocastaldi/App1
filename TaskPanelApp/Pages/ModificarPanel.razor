@page "/ModificarPanel"
@using Domain
@using BusinessLogic.Interfaces
@inject IEquipoLogic EquipoLogic
@inject IPanelLogic PanelLogic
@inject SesionLogic SesionLogic
@inject NavigationManager Navigation


<h3>Modificar Panel</h3>

<div class="mb-3 d-flex align-items-center">
    <label for="equipoSelect" class="me-2">Seleccionar Equipo:</label>
    <select id="equipoSelect" class="form-control me-2" @bind="_nombreEquipoSeleccionado">
        <option value="">Seleccione un equipo</option>
        @foreach (var equipo in _equipos)
        {
            <option value="@equipo.Nombre">@equipo.Nombre</option>
        }
    </select>
    <button class="btn btn-primary" @onclick="CargarEquipo">Cargar Equipo</button>
</div>

@if (_equipoSeleccionado != null)
{
    <div class="mb-3 d-flex align-items-center">
        <label for="panelSelect" class="me-2">Seleccionar Panel:</label>
        <select id="panelSelect" class="form-control me-2" @bind="_nombrePanelSeleccionado">
            <option value="">Seleccione un panel</option>
            @foreach (var panel in _paneles.Where(p => p.Nombre != "Tareas Vencidas"))
            {
                <option value="@panel.Nombre">@panel.Nombre</option>
            }
        </select>
        <button class="btn btn-primary" @onclick="CargarPanel">Cargar Panel</button>
    </div>
}
@if (_panelSeleccionado != null)
{
    <div class="mb-3">
        <label for="nombre">Nombre:</label>
        @if (_editandoNombre)
        {
            <input id="nombre" type="text" class="form-control" maxlength="50" @bind="_nuevoNombre" />
            <button class="btn btn-success" @onclick="GuardarNombre">Guardar</button>
        }
        else
        {
            <p>@_panelSeleccionado.Nombre</p>
            <button class="btn btn-primary" @onclick="EditarNombre">Modificar Nombre</button>
        }
    </div>
    

    <div class="mb-3">
        <label for="descripcion">Descripcion:</label>
        @if (_editandoDescripcion)
        {
            <input id="descripcion" type="text" class="form-control" maxlength="50" @bind="_nuevaDescripcion" />
            <button class="btn btn-success" @onclick="GuardarDescripcion">Guardar</button>
        }
        else
        {
            <p>@_panelSeleccionado.Descripcion</p>
            <button class="btn btn-primary" @onclick="EditarDescripcion">Modificar Descripcion</button>
        }
    </div>
}

@if (!string.IsNullOrEmpty(_errorMessage))
{
    <div class="alert alert-danger">
        <p>@_errorMessage</p>
    </div>
}
@if (!string.IsNullOrEmpty(_successMessage))
{
    <div class="alert alert-success">
        <p>@_successMessage</p>
    </div>
}
@code {
    private List<Equipo> _equipos = new List<Equipo>();
    private string? _nombreEquipoSeleccionado, _nombrePanelSeleccionado;
    private Equipo? _equipoSeleccionado;
    private List<Panel> _paneles = new List<Panel>();
    private Panel? _panelSeleccionado;
    private string? _successMessage, _nuevoNombre, _nuevaDescripcion, _errorMessage;
    private bool _editandoNombre, _editandoDescripcion;


    protected override void OnInitialized()
    {
        if(SesionLogic.UsuarioLogueado != null)
        {
            _equipos = EquipoLogic.ListarEquipos(SesionLogic.UsuarioLogueado);
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender && SesionLogic.UsuarioLogueado == null)
        {
            if (SesionLogic.UsuarioLogueado == null)
            {
                Navigation.NavigateTo("https://localhost:7014/", true);
            }
            firstRender = false;
        }
    }
    
    private void CargarEquipo()
    {
        if (!string.IsNullOrEmpty(_nombreEquipoSeleccionado))
        {
            _errorMessage = null;
            _equipoSeleccionado = _equipos.FirstOrDefault(e => e.Nombre == _nombreEquipoSeleccionado);
            _paneles = EquipoLogic.ListarPaneles(_equipoSeleccionado.Nombre);
        }
    }
    private void CargarPanel()
    {
        if (!string.IsNullOrEmpty(_nombrePanelSeleccionado))
        {
            _errorMessage = null;
            _panelSeleccionado = _paneles.FirstOrDefault(p => p.Nombre == _nombrePanelSeleccionado);
        }
    }
    private void EditarNombre() => _editandoNombre = true;

    private void GuardarNombre()
    {
        try
        {
            if (_panelSeleccionado == null)
            {
                _errorMessage = "No se ha seleccionado un panel.";
                return;
            }

            if (string.IsNullOrEmpty(_nuevoNombre))
            {
                _errorMessage = "El nuevo nombre no puede estar vacío.";
                return;
            }

            if (SesionLogic.UsuarioLogueado == null)
            {
                _errorMessage = "El usuario logueado no está disponible.";
                return;
            }

            _errorMessage = null;
            PanelLogic.CambiarNombre(_panelSeleccionado.Nombre, _nuevoNombre, SesionLogic.UsuarioLogueado, _equipoSeleccionado.Nombre);
            _nombrePanelSeleccionado = _nuevoNombre;
            _editandoNombre = false;
        }
        catch (Exception e)
        {
            _errorMessage = e.Message;
        }
    }
    
    private void EditarDescripcion() => _editandoDescripcion = true;
    private void GuardarDescripcion()
    {
        try
        {
            _errorMessage = null;
            PanelLogic.CambiarDescripcion(_panelSeleccionado.Nombre, _nuevaDescripcion, SesionLogic.UsuarioLogueado, _equipoSeleccionado.Nombre);
            _panelSeleccionado.Descripcion = _nuevaDescripcion;
            _editandoDescripcion = false;
        }
        catch (Exception e)
        {
            _errorMessage = e.Message;
        }
    }
}