@page "/eliminarEquipo"
@using BusinessLogic.Interfaces
@using Domain
@inject IEquipoLogic EquipoLogic
@inject NavigationManager NavigationManager
@inject SesionLogic SesionLogic
@inject NavigationManager Navigation


@if (SesionLogic.UsuarioLogueado.EsAdmin)
{
    <h3>Eliminar equipo</h3>

    <div class="mb-3">
        <label for="equipoSelect">Seleccionar equipo:</label>
        <select id="equipoSelect" class="form-control" @bind="_nombreEquipo">
            <option value="">Seleccione un equipo</option>
            @foreach (var equipo in _equipos)
            {
                <option value="@equipo.Nombre">@equipo.Nombre</option>
            }
        </select>
    </div>

    <button class="btn btn-primary" @onclick="CargarEquipo">Cargar equipo</button>
    <button class="btn btn-danger" @onclick="EliminarEquipoSeleccionado">Eliminar equipo</button>

    @if (_equipoAEliminar != null)
    {
        <div class="mb-3">
            <label for="nombre">Nombre:</label>
            <p>@_equipoAEliminar.Nombre</p>
        </div>

        <div class="mb-3">
            <label for="fechaCreacion">Fecha de creación:</label>
            <p>@_equipoAEliminar.FechaCreacion</p>
        </div>

        <div class="mb-3">
            <label for="descripcion">Descripción:</label>
            <p>@_equipoAEliminar.Descripcion</p>
        </div>

        <div class="mb-3">
            <label for="cantidadUsuarios">Cantidad de usuarios:</label>
            <p>@_equipoAEliminar.CantidadActualUsuarios</p>
        </div>
    }

    @if (!string.IsNullOrEmpty(_validationError))
    {
        <div class="alert alert-danger">@_validationError</div>
    }

    @if (!string.IsNullOrEmpty(_successMessage))
    {
        <div class="alert alert-success">
            <p>@_successMessage</p>
        </div>
    }
}
else
{
    <h3>Error de acceso!</h3>
    <h4>Acceso denegado por falta de permisos</h4>
}

@code {
    private List<Equipo> _equipos = new List<Equipo>();
    private string? _validationError;
    private string? _nombreEquipo;
    private Equipo? _equipoAEliminar;
    private Usuario? _usuarioLogueado;
    private string? _successMessage;
    private bool _firstRender = true;


    protected override void OnInitialized()
    {
        if(SesionLogic.UsuarioLogueado != null)
        {
            _usuarioLogueado = SesionLogic.UsuarioLogueado;
            _equipos = EquipoLogic.ListarEquipos(_usuarioLogueado);
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender && SesionLogic.UsuarioLogueado == null)
        {
            if (SesionLogic.UsuarioLogueado == null)
            {
                Navigation.NavigateTo("https://localhost:7014/", true);
            }
            firstRender = false;
        }
    }

    private void CargarEquipo()
    {
        if (!string.IsNullOrEmpty(_nombreEquipo))
        {
            _equipoAEliminar = _equipos.FirstOrDefault(e => e.Nombre == _nombreEquipo);
            _validationError = null;
            _successMessage = null;
        }
    }

    private void EliminarEquipoSeleccionado()
    {
        if (_equipoAEliminar != null)
        {
            try
            {
                EquipoLogic.EliminarEquipo(_nombreEquipo, _usuarioLogueado);   
                _equipos.Remove(_equipoAEliminar);
                _validationError = null;
                _successMessage = "Equipo eliminado exitosamente.";
                _equipoAEliminar = null;
            }catch (Exception e)
            {
                _validationError = e.Message;
            }
        }
        else
        {
            _validationError = "Debe cargar un equipo para poder eliminar.";
        }
    }
}