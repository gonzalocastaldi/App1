@page "/ModificarPanel"
@using Domain
@using BusinessLogic
@using BusinessLogic.Interfaces
@inject IEquipoLogic equipoLogic
@inject IPanelLogic panelLogic
@inject SesionLogic sesionLogic
@inject NavigationManager Navigation


<h3>Modificar Panel</h3>

<div class="mb-3 d-flex align-items-center">
    <label for="equipoSelect" class="me-2">Seleccionar Equipo:</label>
    <select id="equipoSelect" class="form-control me-2" @bind="nombreEquipoSeleccionado">
        <option value="">Seleccione un equipo</option>
        @foreach (var equipo in equipos)
        {
            <option value="@equipo.Nombre">@equipo.Nombre</option>
        }
    </select>
    <button class="btn btn-primary" @onclick="CargarEquipo">Cargar Equipo</button>
</div>

@if (equipoSeleccionado != null)
{
    <div class="mb-3 d-flex align-items-center">
        <label for="panelSelect" class="me-2">Seleccionar Panel:</label>
        <select id="panelSelect" class="form-control me-2" @bind="nombrePanelSeleccionado">
            <option value="">Seleccione un panel</option>
            @foreach (var panel in paneles.Where(p => p.Nombre != "Tareas Vencidas"))
            {
                <option value="@panel.Nombre">@panel.Nombre</option>
            }
        </select>
        <button class="btn btn-primary" @onclick="CargarPanel">Cargar Panel</button>
    </div>
}
@if (panelSeleccionado != null)
{
    <div class="mb-3">
        <label for="nombre">Nombre:</label>
        @if (editandoNombre)
        {
            <input id="nombre" type="text" class="form-control" maxlength="50" @bind="nuevoNombre" />
            <button class="btn btn-success" @onclick="GuardarNombre">Guardar</button>
        }
        else
        {
            <p>@panelSeleccionado.Nombre</p>
            <button class="btn btn-primary" @onclick="EditarNombre">Modificar Nombre</button>
        }
    </div>
    

    <div class="mb-3">
        <label for="descripcion">Descripcion:</label>
        @if (editandoDescripcion)
        {
            <input id="descripcion" type="text" class="form-control" maxlength="50" @bind="nuevaDescripcion" />
            <button class="btn btn-success" @onclick="GuardarDescripcion">Guardar</button>
        }
        else
        {
            <p>@panelSeleccionado.Descripcion</p>
            <button class="btn btn-primary" @onclick="EditarDescripcion">Modificar Descripcion</button>
        }
    </div>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">
        <p>@errorMessage</p>
    </div>
}
@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success">
        <p>@successMessage</p>
    </div>
}
@code {
    private List<Equipo> equipos = new List<Equipo>();
    private string? nombreEquipoSeleccionado, nombrePanelSeleccionado;
    private Equipo? equipoSeleccionado;
    private List<Panel> paneles = new List<Panel>();
    private Panel panelSeleccionado;
    private string successMessage, nuevoNombre, nuevaDescripcion, errorMessage;
    private bool editandoNombre;
    private bool editandoDescripcion;
    private bool firstRender = true;


    protected override void OnInitialized()
    {
        if(sesionLogic.UsuarioLogueado != null)
        {
            equipos = equipoLogic.ListarEquipos(sesionLogic.UsuarioLogueado);
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender && sesionLogic.UsuarioLogueado == null)
        {
            if (sesionLogic.UsuarioLogueado == null)
            {
                Navigation.NavigateTo("https://localhost:7014/", true);
            }
            firstRender = false;
        }
    }
    
    private void CargarEquipo()
    {
        if (!string.IsNullOrEmpty(nombreEquipoSeleccionado))
        {
            errorMessage = null;
            equipoSeleccionado = equipos.FirstOrDefault(e => e.Nombre == nombreEquipoSeleccionado);
            paneles = equipoLogic.ListarPaneles(equipoSeleccionado.Nombre);
        }
    }
    private void CargarPanel()
    {
        if (!string.IsNullOrEmpty(nombrePanelSeleccionado))
        {
            errorMessage = null;
            panelSeleccionado = paneles.FirstOrDefault(p => p.Nombre == nombrePanelSeleccionado);
        }
    }
    private void EditarNombre() => editandoNombre = true;

    private void GuardarNombre()
    {
        try
        {
            if (panelSeleccionado == null)
            {
                errorMessage = "No se ha seleccionado un panel.";
                return;
            }

            if (string.IsNullOrEmpty(nuevoNombre))
            {
                errorMessage = "El nuevo nombre no puede estar vacío.";
                return;
            }

            if (sesionLogic.UsuarioLogueado == null)
            {
                errorMessage = "El usuario logueado no está disponible.";
                return;
            }

            errorMessage = null;
            panelLogic.CambiarNombre(panelSeleccionado.Nombre, nuevoNombre, sesionLogic.UsuarioLogueado, equipoSeleccionado.Nombre);
            nombrePanelSeleccionado = nuevoNombre;
            editandoNombre = false;
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
        }
    }
    
    private void EditarDescripcion() => editandoDescripcion = true;
    private void GuardarDescripcion()
    {
        try
        {
            errorMessage = null;
            panelLogic.CambiarDescripcion(panelSeleccionado.Nombre, nuevaDescripcion, sesionLogic.UsuarioLogueado, equipoSeleccionado.Nombre);
            panelSeleccionado.Descripcion = nuevaDescripcion;
            editandoDescripcion = false;
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
        }
    }
}