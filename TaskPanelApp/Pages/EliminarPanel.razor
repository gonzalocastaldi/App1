@page "/EliminarPanel"
@using Domain
@using BusinessLogic
@using BusinessLogic.Interfaces
@inject IEquipoLogic equipoLogic
@inject IPanelLogic panelLogic
@inject IPapeleraLogic papeleraLogic
@inject SesionLogic sesionLogic
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation


<h3>Eliminar Panel</h3>
@if (sesionLogic.UsuarioLogueado != null && sesionLogic.UsuarioLogueado.EsAdmin)
{
    <div class="mb-3 d-flex align-items-center">
        <label for="equipoSelect" class="me-2">Seleccionar Equipo:</label>
        <select id="equipoSelect" class="form-control me-2" @bind="nombreEquipoSeleccionado">
            <option value="">Seleccione un equipo</option>
            @foreach (var equipo in equipos)
            {
                <option value="@equipo.Nombre">@equipo.Nombre</option>
            }
        </select>
        <button class="btn btn-primary" @onclick="CargarEquipo">Cargar Equipo</button>
    </div>

    @if (equipoSeleccionado != null)
    {
        <div class="mb-3 d-flex align-items-center">
            <label for="panelSelect" class="me-2">Seleccionar Panel:</label>
            <select id="panelSelect" class="form-control me-2" @bind="nombrePanelSeleccionado">
                <option value="">Seleccione un panel</option>
                @foreach (var panel in paneles.Where(p => p.Nombre != "Tareas Vencidas"))
                {
                    <option value="@panel.Nombre">@panel.Nombre</option>
                }
            </select>
            <button class="btn btn-primary" @onclick="CargarPanel">Cargar Panel</button>
        </div>
        if (panelSeleccionado != null)
        {
            <div class="mb-3">
                <label>Nombre: </label>
                <p>@panelSeleccionado.Nombre</p>
            </div>
            <div class="mb-3">
                <label>Descripcion: </label>
                <p>@panelSeleccionado.Descripcion</p>
            </div>
            <div class="mb-3">
                <button class="btn btn-danger" @onclick="EliminarPanelSeleccionado">Eliminar panel</button>
            </div>
        }
    }
}
else
{
    <p>Solo los administradores pueden eliminar paneles</p>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
<div class="alert alert-danger">
    <p>@errorMessage</p>
</div>
}
@if (!string.IsNullOrEmpty(successMessage))
{
<div class="alert alert-success">
    <p>@successMessage</p>
</div>
}

@code {
    private List<Equipo> equipos = new List<Equipo>();
    private string? nombreEquipoSeleccionado;
    private Equipo? equipoSeleccionado;
    private List<Panel> paneles = new List<Panel>();
    private string? nombrePanelSeleccionado;
    private Panel panelSeleccionado;
    private string errorMessage;
    private string successMessage;
    private bool firstRender = true;


    protected override void OnInitialized()
    {
        if(sesionLogic.UsuarioLogueado != null)
        {
            equipos = equipoLogic.ListarEquipos(sesionLogic.UsuarioLogueado);
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender && sesionLogic.UsuarioLogueado == null)
        {
            if (sesionLogic.UsuarioLogueado == null)
            {
                Navigation.NavigateTo("https://localhost:7014/", true);
            }
            firstRender = false;
        }
    }
    
    private void CargarEquipo()
    {
        if (!string.IsNullOrEmpty(nombreEquipoSeleccionado))
        {
            if (!string.IsNullOrEmpty(nombreEquipoSeleccionado))
            {
                equipoSeleccionado = equipos.FirstOrDefault(e => e.Nombre == nombreEquipoSeleccionado);
                paneles = equipoLogic.ListarPaneles(equipoSeleccionado.Nombre);
                successMessage = null;
                errorMessage = null;
            }
        }
    }
    private void CargarPanel()
    {
        if (!string.IsNullOrEmpty(nombrePanelSeleccionado))
        {
            panelSeleccionado = paneles.FirstOrDefault(p => p.Nombre == nombrePanelSeleccionado);
            successMessage = null;
            errorMessage = null;
        }
    }

    private async Task EliminarPanelSeleccionado()
    {
        try
        {
            if (equipoSeleccionado == null || panelSeleccionado == null)
            {
                errorMessage = "Debe seleccionar un equipo y un panel.";
                return;
            }
            equipoLogic.EliminarPanel(equipoSeleccionado.Nombre, panelSeleccionado.Nombre, sesionLogic.UsuarioLogueado);
            paneles.Remove(panelSeleccionado);
            panelSeleccionado = null;
            errorMessage = null;
            successMessage = "Panel enviado a la papelera con éxito";
        }catch(Exception ex)
        {
            successMessage = null;
            errorMessage = ex.Message;
            if (errorMessage.Equals("La papelera está llena."))
            {
                await MostrarConfirmacionPapeleraLlena();
            }
        }
    }

    private async Task MostrarConfirmacionPapeleraLlena()
    {
        bool? resultado = await JSRuntime.InvokeAsync<bool?>("confirm", "La papelera está llena. El elemento se eliminará de forma permanente. Desea continuar?");
        if (resultado == true)
        {
            try
            {
                equipoLogic.EliminarPanelDeFormaPermanente(equipoSeleccionado.Nombre, panelSeleccionado.Nombre, sesionLogic.UsuarioLogueado);
                paneles.Remove(panelSeleccionado);
                panelSeleccionado = null;
                errorMessage = null;
                successMessage = "Panel eliminado con éxito";
            }
            catch (Exception ex)
            {
                successMessage = null;
                errorMessage = ex.Message;
            }
        }
    }
}