@page "/ModificarEpica"
@using BusinessLogic.Interfaces
@using DTOs
@using Domain
@inject IEquipoLogic EquipoLogic
@inject SesionLogic SesionLogic
@inject IEpicaLogic EpicaLogic;
@inject IPanelLogic PanelLogic;
@inject NavigationManager Navigation

<h3>Modificar Epica</h3>

<div class="mb-3 d-flex align-items-center">
    <label for="equipoSelect" class="me-2">Seleccionar Equipo:</label>
    <select id="equipoSelect" class="form-control me-2" @bind="_nombreEquipoSeleccionado">
        <option value="">Seleccione un equipo</option>
        @foreach (var equipo in _equipos)
        {
        <option value="@equipo.Nombre">@equipo.Nombre</option>
        }
    </select>
    <button class="btn btn-primary" @onclick="CargarEquipo">Cargar Equipo</button>
</div>

@if (_equipoSeleccionado != null)
{
<div class="mb-3 d-flex align-items-center">
    <label for="panelSelect" class="me-2">Seleccionar Panel:</label>
    <select id="panelSelect" class="form-control me-2" @bind="_nombrePanelSeleccionado">
        <option value="">Seleccione un panel</option>
        @foreach (var panel in _paneles)
        {
        <option value="@panel.Nombre">@panel.Nombre</option>
        }
    </select>
    <button class="btn btn-primary" @onclick="CargarPanel">Cargar Panel</button>
</div>
}

@if (!string.IsNullOrEmpty(_errorMessage))
{
<div class="alert alert-danger">
    <p>@_errorMessage</p>
</div>
}
@if (!string.IsNullOrEmpty(_successMessage))
{
<div class="alert alert-success">
    <p>@_successMessage</p>
</div>
}
@if (_panelSeleccionado != null)
{
<div class="mb-3 d-flex align-items-center">
    <label for="epicaSelect" class="me-2">Seleccionar Epica:</label>
    <select id="epicaSelect" class="form-control me-2" @bind="_tituloEpicaSeleccionada">
        <option value="">Seleccione una epica</option>
        @foreach (var epica in _epicas)
        {
        <option value="@epica.Titulo">@epica.Titulo</option>
        }
    </select>
    <button class="btn btn-primary" @onclick="CargarEpica">Cargar Epica</button>
</div>
}
@if (_epicaSeleccionada != null)
{
    <div class="mb-3">
        <label for="titulo">Titulo:</label>
        @if (_editandoTitulo)
        {
            <input id="titulo" type="text" class="form-control" maxlength="50" @bind="_nuevoTitulo"/>
            <button class="btn btn-success" @onclick="GuardarTitulo">Guardar</button>
        }
        else
        {
            <p>@_epicaSeleccionada.Titulo</p>
            <button class="btn btn-primary" @onclick="EditarTitulo">Modificar Titulo</button>
        }
    </div>
    <div class="mb-3">
        <label for="descripcion">Descripcion:</label>
        @if (_editandoDescripcion)
        {
            <input id="descripcion" type="text" class="form-control" maxlength="50" @bind="_nuevaDescripcion"/>
            <button class="btn btn-success" @onclick="GuardarDescripcion">Guardar</button>
        }
        else
        {
            <p>@_epicaSeleccionada.Descripcion</p>
            <button class="btn btn-primary" @onclick="EditarDescripcion">Modificar Descripcion</button>
        }
    </div>
    <div class="mb-3">
        <label for="tareaSelect">Seleccionar tarea:</label>
        <select id="tareaSelect" class="form-control" @bind="_tituloTareaSeleccionada">
            <option value="">Seleccione una tarea</option>
                @foreach (var tarea in _tareasDisponibles)
                {
                    <option value="@tarea.Titulo">@tarea.Titulo</option>
                }
        </select>
    </div>
    
    <button class="btn btn-primary" @onclick="AgregarTarea">Agregar tarea</button>
    
    <hr/>
    <div class="mb-3">
        <label for="tareaSelect">Seleccionar tarea:</label>
        <select id="tareaSelect" class="form-control" @bind="_tituloTareaSeleccionadaParaEliminar">
            <option value="">Seleccione una tarea</option>
            @foreach (var tarea in _tareasDisponiblesParaEliminar)
            {
                <option value="@tarea.Titulo">@tarea.Titulo</option>
            }
        </select>
    </div>

    <button class="btn btn-danger" @onclick="EliminarTarea">Eliminar tarea</button>
}

@code {
    private List<Equipo> _equipos = new List<Equipo>();
    private string? _nombreEquipoSeleccionado, _nombrePanelSeleccionado, _tituloEpicaSeleccionada, _errorMessage, _nuevoTitulo, _successMessage, _nuevaDescripcion;
    private Equipo? _equipoSeleccionado;
    private List<Panel?> _paneles = new List<Panel?>();
    private Panel? _panelSeleccionado;
    private List<Epica> _epicas = new List<Epica>();
    private Epica? _epicaSeleccionada;
    private bool _editandoTitulo = false;
    private bool _editandoDescripcion = false;
    private List<Tarea> _tareasDisponibles = new List<Tarea>();
    private string? _tituloTareaSeleccionada;
    private Tarea? _tareaSeleccionada;
    private List<Tarea>? _tareasDisponiblesParaEliminar = new List<Tarea>();
    private string? _tituloTareaSeleccionadaParaEliminar;
    private Tarea? _tareaSeleccionadaParaEliminar;

    protected override void OnInitialized()
    {
        if (SesionLogic.UsuarioLogueado != null)
        {
            _equipos = EquipoLogic.ListarEquipos(SesionLogic.UsuarioLogueado);
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender && SesionLogic.UsuarioLogueado == null)
        {
            if (SesionLogic.UsuarioLogueado == null)
            {
                Navigation.NavigateTo("https://localhost:7014/", true);
            }

            firstRender = false;
        }
    }

    private void CargarEquipo()
    {
        if (!string.IsNullOrEmpty(_nombreEquipoSeleccionado))
        {
            _equipoSeleccionado = _equipos.FirstOrDefault(e => e.Nombre == _nombreEquipoSeleccionado);
            _paneles = _equipoSeleccionado.Paneles;
        }
    }

    private void CargarPanel()
    {
        if (!string.IsNullOrEmpty(_nombrePanelSeleccionado))
        {
            _panelSeleccionado = _paneles.FirstOrDefault(p => p.Nombre == _nombrePanelSeleccionado);
            _epicas = _panelSeleccionado.Epicas;
            CargarListaTareas();
        }
    }

    private void CargarEpica()
    {
        if (!string.IsNullOrEmpty(_tituloEpicaSeleccionada))
        {
            _epicaSeleccionada = _epicas.FirstOrDefault(e => e.Titulo == _tituloEpicaSeleccionada);
        }
        CargarListaTareasParaEliminar();
    }

    private void EditarTitulo() => _editandoTitulo = true;

    private void GuardarTitulo()
    {

        try
        {
            if (_epicaSeleccionada == null)
            {
                _errorMessage = "No se ha seleccionado una epica.";
                return;
            }

            if (string.IsNullOrEmpty(_nuevoTitulo))
            {
                _errorMessage = "El nuevo titulo no puede estar vacío.";
                return;
            }

            CambiarTituloEpicaDTO cambiarTituloEpicaDto = new CambiarTituloEpicaDTO(_nombreEquipoSeleccionado, _nombrePanelSeleccionado, _nuevoTitulo, _tituloEpicaSeleccionada);
            EpicaLogic.CambiarTitulo(cambiarTituloEpicaDto);
            _tituloEpicaSeleccionada = _nuevoTitulo;
            _editandoTitulo = false;
            _errorMessage = null;
            _successMessage = "Titulo modificado con exito";
        }
        catch (Exception e)
        {
            _errorMessage = e.Message;
            _successMessage = null;
        }
    }

    private void EditarDescripcion() => _editandoDescripcion = true;

    private void GuardarDescripcion()
    {
        try
        {
            if (_epicaSeleccionada == null)
            {
                _errorMessage = "No se ha seleccionado un usuario.";
                return;
            }

            if (string.IsNullOrEmpty(_nuevaDescripcion))
            {
                _errorMessage = "La nueva descripcion no puede estar vacía.";
                return;
            }

            EpicaLogic.CambiarDescripcion(_nombreEquipoSeleccionado, _nombrePanelSeleccionado, _nuevaDescripcion, _tituloEpicaSeleccionada);
            _epicaSeleccionada.Descripcion = _nuevaDescripcion;
            _editandoDescripcion = false;
            _errorMessage = null;
            _successMessage = "Descripcion modificada con exito";
        }
        catch (Exception e)
        {
            _errorMessage = e.Message;
            _successMessage = null;
        }
    }
    private void CargarListaTareas()
    {
        try
        {
            _tareasDisponibles = PanelLogic.ListarTareasSinEpicaAsociada(_nombrePanelSeleccionado, _nombreEquipoSeleccionado);
        }
        catch (Exception e)
        {
            _errorMessage = e.Message;
        }
    }

    private void CargarListaTareasParaEliminar()
    {
        try
        {
            _tareasDisponiblesParaEliminar = PanelLogic.ListarTareasPorEpica(_nombrePanelSeleccionado, _nombreEquipoSeleccionado, _tituloEpicaSeleccionada);
        }
        catch (Exception e)
        {
            _errorMessage = e.Message;
        }
    }

    private void AgregarTarea()
    {
        _tareaSeleccionada = _tareasDisponibles.FirstOrDefault(t => t.Titulo == _tituloTareaSeleccionada);
        if (_tareaSeleccionada == null)
        {
            _errorMessage = "No se ha seleccionado una tarea.";
            return;
        }

        try
        {
            EpicaLogic.AgregarTarea(_nombreEquipoSeleccionado, _nombrePanelSeleccionado, _tituloEpicaSeleccionada, _tareaSeleccionada);
            CargarListaTareasParaEliminar();
            CargarListaTareas();
            _errorMessage = null;
            _successMessage = "Tarea agregada correctamente.";
        }
        catch (Exception e)
        {
            _errorMessage = e.Message;
        }
    }

    private void EliminarTarea()
    {
        _tareaSeleccionadaParaEliminar = _tareasDisponiblesParaEliminar.FirstOrDefault(t => t.Titulo == _tituloTareaSeleccionadaParaEliminar);
        if (_tareaSeleccionadaParaEliminar == null)
        {
            _errorMessage = "No se ha seleccionado una tarea.";
            return;
        }
        try
        {
            EpicaLogic.EliminarTarea(_nombreEquipoSeleccionado, _nombrePanelSeleccionado, _tituloEpicaSeleccionada, _tareaSeleccionadaParaEliminar);
            CargarListaTareasParaEliminar();
            CargarListaTareas();
            _errorMessage = null;
            _successMessage = "Tarea eliminada correctamente.";
        }
        catch (Exception e)
        {
            _errorMessage = e.Message;
        }
    }
}
