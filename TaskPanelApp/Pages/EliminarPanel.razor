@page "/EliminarPanel"
@using Domain
@using BusinessLogic.Interfaces
@inject IEquipoLogic EquipoLogic
@inject SesionLogic SesionLogic
@inject IJSRuntime JsRuntime
@inject NavigationManager Navigation


<h3>Eliminar Panel</h3>
@if (SesionLogic.UsuarioLogueado.EsAdmin)
{
    <div class="mb-3 d-flex align-items-center">
        <label for="equipoSelect" class="me-2">Seleccionar Equipo:</label>
        <select id="equipoSelect" class="form-control me-2" @bind="_nombreEquipoSeleccionado">
            <option value="">Seleccione un equipo</option>
            @foreach (var equipo in _equipos)
            {
                <option value="@equipo.Nombre">@equipo.Nombre</option>
            }
        </select>
        <button class="btn btn-primary" @onclick="CargarEquipo">Cargar Equipo</button>
    </div>

    @if (_equipoSeleccionado != null)
    {
        <div class="mb-3 d-flex align-items-center">
            <label for="panelSelect" class="me-2">Seleccionar Panel:</label>
            <select id="panelSelect" class="form-control me-2" @bind="_nombrePanelSeleccionado">
                <option value="">Seleccione un panel</option>
                @foreach (var panel in _paneles.Where(p => p.Nombre != "Tareas Vencidas"))
                {
                    <option value="@panel.Nombre">@panel.Nombre</option>
                }
            </select>
            <button class="btn btn-primary" @onclick="CargarPanel">Cargar Panel</button>
        </div>
        if (_panelSeleccionado != null)
        {
            <div class="mb-3">
                <label>Nombre: </label>
                <p>@_panelSeleccionado.Nombre</p>
            </div>
            <div class="mb-3">
                <label>Descripcion: </label>
                <p>@_panelSeleccionado.Descripcion</p>
            </div>
            <div class="mb-3">
                <button class="btn btn-danger" @onclick="EliminarPanelSeleccionado">Eliminar panel</button>
            </div>
        }
    }
}
else
{
    <p>Solo los administradores pueden eliminar paneles</p>
}

@if (!string.IsNullOrEmpty(_errorMessage))
{
<div class="alert alert-danger">
    <p>@_errorMessage</p>
</div>
}
@if (!string.IsNullOrEmpty(_successMessage))
{
<div class="alert alert-success">
    <p>@_successMessage</p>
</div>
}

@code {
    private List<Equipo> _equipos = new List<Equipo>();
    private string? _nombreEquipoSeleccionado;
    private Equipo? _equipoSeleccionado;
    private List<Panel> _paneles = new List<Panel>();
    private string? _nombrePanelSeleccionado;
    private Panel? _panelSeleccionado;
    private string? _errorMessage;
    private string? _successMessage;


    protected override void OnInitialized()
    {
        if(SesionLogic.UsuarioLogueado != null)
        {
            _equipos = EquipoLogic.ListarEquipos(SesionLogic.UsuarioLogueado);
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender && SesionLogic.UsuarioLogueado == null)
        {
            if (SesionLogic.UsuarioLogueado == null)
            {
                Navigation.NavigateTo("https://localhost:7014/", true);
            }
            firstRender = false;
        }
    }
    
    private void CargarEquipo()
    {
        if (!string.IsNullOrEmpty(_nombreEquipoSeleccionado))
        {
            if (!string.IsNullOrEmpty(_nombreEquipoSeleccionado))
            {
                _equipoSeleccionado = _equipos.FirstOrDefault(e => e.Nombre == _nombreEquipoSeleccionado);
                _paneles = EquipoLogic.ListarPaneles(_equipoSeleccionado.Nombre);
                _successMessage = null;
                _errorMessage = null;
            }
        }
    }
    private void CargarPanel()
    {
        if (!string.IsNullOrEmpty(_nombrePanelSeleccionado))
        {
            _panelSeleccionado = _paneles.FirstOrDefault(p => p.Nombre == _nombrePanelSeleccionado);
            _successMessage = null;
            _errorMessage = null;
        }
    }

    private async Task EliminarPanelSeleccionado()
    {
        try
        {
            if (_equipoSeleccionado == null || _panelSeleccionado == null)
            {
                _errorMessage = "Debe seleccionar un equipo y un panel.";
                return;
            }
            EquipoLogic.EliminarPanel(_equipoSeleccionado.Nombre, _panelSeleccionado.Nombre, SesionLogic.UsuarioLogueado);
            _paneles.Remove(_panelSeleccionado);
            _panelSeleccionado = null;
            _errorMessage = null;
            _successMessage = "Panel enviado a la papelera con éxito";
        }catch(Exception ex)
        {
            _successMessage = null;
            _errorMessage = ex.Message;
            if (_errorMessage.Equals("La papelera está llena."))
            {
                await MostrarConfirmacionPapeleraLlena();
            }
        }
    }

    private async Task MostrarConfirmacionPapeleraLlena()
    {
        bool? resultado = await JsRuntime.InvokeAsync<bool?>("confirm", "La papelera está llena. El elemento se eliminará de forma permanente. Desea continuar?");
        if (resultado == true)
        {
            try
            {
                EquipoLogic.EliminarPanelDeFormaPermanente(_equipoSeleccionado.Nombre, _panelSeleccionado.Nombre, SesionLogic.UsuarioLogueado);
                _paneles.Remove(_panelSeleccionado);
                _panelSeleccionado = null;
                _errorMessage = null;
                _successMessage = "Panel eliminado con éxito";
            }
            catch (Exception ex)
            {
                _successMessage = null;
                _errorMessage = ex.Message;
            }
        }
    }
}