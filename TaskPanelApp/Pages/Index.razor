@page "/"
@using BusinessLogic.Interfaces
@using Domain
@inject NavigationManager NavigationManager
@inject IUsuarioLogic UsuarioLogic

<PageTitle>TaskPanel</PageTitle>

<h1>Login</h1>

<form @onsubmit="HandleLogin">
    <br/>
    <div class="form-group">
        <label for="Name">Email:</label>
        <input id="Name" class="form-control" maxlength="50" @bind="_email"/>
    </div>

    <br/>
    <div class="form-group">
        <label for="Password">Contraseña:</label>
        <input id="Password" type="password" class="form-control" maxlength="50" @bind="_contrasena"/>
    </div>
    
    <br/>
    <button type="submit" class="btn btn-primary">Login</button>
</form>

@if (!string.IsNullOrEmpty(_mensajeDeError))
{
    <br/>
    <div class="alert alert-danger" role="alert">
        @_mensajeDeError
    </div>
}

@if (_monstrarMensajeDeLogin)
{
    <br/>
    <div class="alert alert-success" role="alert">
        ¡Logueado con exito! Redireccionando...
    </div>
}

@code {
    Usuario? _usuario;
    private string? _email;
    private string? _contrasena;
    private string? _mensajeDeError;
    private bool _monstrarMensajeDeLogin = false;
    
    protected override void OnInitialized()
    {
        
        _usuario = new Usuario();
    }

    private async Task HandleLogin()
    {
        try
        {
            _usuario.Email = _email;
            _usuario.Contrasena = _contrasena;
            UsuarioLogic.IniciarSesion(_usuario);
            _monstrarMensajeDeLogin = true;
            await Task.Delay(1000);
            NavigationManager.NavigateTo("/inicio");
            ResetValues();
        }
        catch (Exception ex)
        {
            
            _mensajeDeError = ex.Message;
        }
    }

    private void ResetValues()
    {
        _email = string.Empty;
        _contrasena = string.Empty;
        _mensajeDeError = null; 
    }

}