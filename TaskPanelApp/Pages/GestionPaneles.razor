@page "/gestionPaneles"
@using BusinessLogic.Interfaces
@using DTOs
@using Domain
@inject IEquipoLogic EquipoLogic
@inject ITareaLogic TareaLogic
@inject IComentarioLogic ComentarioLogic
@inject IPanelLogic PanelLogic
@inject SesionLogic SesionLogic
@inject IJSRuntime JsRuntime
@inject NavigationManager Navigation


<h3>Gestión de Paneles</h3>


<div class="mb-3 d-flex align-items-center">
    <label for="equipoSelect" class="me-2">Seleccionar Equipo:</label>
    <select id="equipoSelect" class="form-control me-2" @bind="_nombreEquipoSeleccionado">
        <option value="">Seleccione un equipo</option>
        @foreach (var equipo in _equipos)
        {
        <option value="@equipo.Nombre">@equipo.Nombre</option>
        }
    </select>
    <button class="btn btn-primary" @onclick="CargarEquipo">Cargar Equipo</button>
</div>

@if (_equipoSeleccionado != null)
{
    <div class="mb-3 d-flex align-items-center">
        <label for="panelSelect" class="me-2">Seleccionar Panel:</label>
        <select id="panelSelect" class="form-control me-2" @bind="_nombrePanelSeleccionado">
            <option value="">Seleccione un panel</option>
            @foreach (var panel in _paneles.Where(p => p.Nombre != "Tareas Vencidas"))
            {
                <option value="@panel.Nombre">@panel.Nombre</option>
            }
        </select>
        <button class="btn btn-primary" @onclick="CargarPanel">Cargar Panel</button>
    </div>
}
@if (_panelSeleccionado != null)
{
<div class="mb-3 d-flex align-items-center">
    <label for="epicaSelect" class="me-2">Seleccionar Épica:</label>
    <select id="epicaSelect" class="form-control me-2" @bind="_tituloEpicaSeleccionada">
        <option value="">Seleccione una épica</option>
        @foreach (var epica in _epicas)
        {
        <option value="@epica.Titulo">@epica.Titulo</option>
        }
    </select>
    <button class="btn btn-primary" @onclick="CargarEpica">Cargar Épica</button>
</div>
}

@if (!string.IsNullOrEmpty(_errorMessage))
{
<div class="alert alert-danger">
    <p>@_errorMessage</p>
</div>
}
@if (!string.IsNullOrEmpty(_successMessage))
{
<div class="alert alert-success">
    <p>@_successMessage</p>
</div>
}

@if (_epicaSeleccionada == true)
{
    <div class="mb-3 d-flex align-items-center">
        <label for="tareaSelect" class="me-2">Seleccionar Tarea:</label>
        <select id="tareaSelect" class="form-control me-2" @bind="_tituloTareaSeleccionada">
            <option value="">Seleccione una tarea</option>
            @foreach (var tarea in _tareas)
            {
                <option value="@tarea.Titulo">@tarea.Titulo</option>
            }
        </select>
        <button class="btn btn-primary" @onclick="CargarTarea">Cargar Tarea</button>
    </div>
}
@if (_tareaSeleccionada != null)
{
    <div class="mb-3">
        <label for="titulo">Titulo:</label>
        @if (_editandoTitulo)
        {
            <input id="titulo" type="text" class="form-control" maxlength="50" @bind="_nuevoTitulo" />
            <button class="btn btn-success" @onclick="GuardarTitulo">Guardar</button>
        }
        else
        {
            <p>@_tareaSeleccionada.Titulo</p>
            <button class="btn btn-primary" @onclick="EditarTitulo">Modificar Titulo</button>
        }
    </div>
    <div class="mb-3">
        <label for="descripcion">Descripcion:</label>
        @if (_editandoDescripcion)
        {
            <input id="descripcion" type="text" class="form-control" maxlength="50" @bind="_nuevaDescripcion" />
            <button class="btn btn-success" @onclick="GuardarDescripcion">Guardar</button>
        }
        else
        {
            <p>@_tareaSeleccionada.Descripcion</p>
            <button class="btn btn-primary" @onclick="EditarDescripcion">Modificar Descripcion</button>
        }
    </div>
    
    <div class="mb-3">
        <label>Esfuerzo estimado:</label>
        <p>@_tareaSeleccionada.EsfuerzoEstimado</p>
    </div>
    
    <div class="mb-3">
        <label for="esfuerzoInvertido">Esfuerzo invertido:</label>
        @if (_editandoEsfuerzoInvertido)
        {
            <input id="esfuerzoInvertido" type="number" class="form-control" @bind="_nuevoEsfuerzoInvertido" />
            <button class="btn btn-success" @onclick="GuardarEsfuerzoInvertido">Guardar</button>
        }
        else
        {
            <p>@_tareaSeleccionada.EsfuerzoInvertido</p>
            <button class="btn btn-primary" @onclick="EditarEsfuerzoInvertido">Modificar Esfuerzo Invertido</button>
        }
    </div>
    
    
    <div class="mb-3">
        <label>Fecha de expiración:</label>
        <p>@_tareaSeleccionada.FechaExpiracion</p>
    </div>
    <div class="mb-3">
        <label>Prioridad:</label>
        <p>@_tareaSeleccionada.Prioridad</p>
    </div>
    <div class="mb-3">
        <button class="btn btn-danger" @onclick="EliminarTareaSeleccionada">Eliminar tarea</button>
    </div>
    <hr/>
    
    <div class="mb-3">
        <label>Comentarios:</label>
        <ul>
        @foreach (var comentario in TareaLogic.ObtenerComentariosDeTarea(_nombreEquipoSeleccionado, _nombrePanelSeleccionado, _tituloTareaSeleccionada))
        {
            <li>Titulo: @comentario.Titulo</li>
            <li>Descripcion: @comentario.Descripcion</li>
            <li>Usuario que lo creó: @comentario.UsuarioCreador.Email </li>
            @if (comentario.Estado == false)
            {
                <li>Estado: No resuelto</li>
                <button class="btn btn-primary" @onclick="() => ResolverComentario(comentario)">Resolver</button>
            }
            else
            {
                <li>Estado: Resuelto</li>
                <li>Usuario que lo resolvió: @comentario.UsuarioResolvedor.Nombre  @comentario.UsuarioResolvedor.Apellido</li>
                <li>Fecha de resolución: @comentario.FechaResolucion</li>
            }
            <hr/>
        }
        </ul>
    </div>

    <div class="mb-3">
        <label>Agregar Comentario:</label>
        <form @onsubmit="CrearComentario">
            <div class="mb-3">
                <label for="titulo">Titulo:</label>
                <input id="titulo" type="text" class="form-control" maxlength="50" @bind="_comentario.Titulo" required />
            </div>

            <div class="mb-3">
                <label for="descripcion">Descripcion:</label>
                <input id="descripcion" type="text" class="form-control" maxlength="50" @bind="_comentario.Descripcion" required />
            </div>
            <button type="submit" class="btn btn-primary">Agregar</button>
        </form>
    </div>
}

@code {
    private List<Equipo> _equipos = new List<Equipo>();
    private string? _nombreEquipoSeleccionado, _nombrePanelSeleccionado, _tituloTareaSeleccionada, _errorMessage, _nuevoTitulo, _successMessage, _nuevaDescripcion, _tituloEpicaSeleccionada;
    private int _nuevoEsfuerzoInvertido;
    private Equipo? _equipoSeleccionado;
    private List<Panel> _paneles = new List<Panel>();
    private Panel? _panelSeleccionado;
    private List<Tarea> _tareas = new List<Tarea>();
    private Tarea? _tareaSeleccionada;
    private bool _editandoTitulo = false;
    private bool _editandoDescripcion = false;
    private bool _editandoEsfuerzoInvertido = false;
    private Comentario _comentario = new Comentario();
    private bool _epicaSeleccionada = false;
    private List<Epica> _epicas = new List<Epica>();
    
    protected override void OnInitialized()
    {
        if(SesionLogic.UsuarioLogueado != null)
        {
            _equipos = EquipoLogic.ListarEquipos(SesionLogic.UsuarioLogueado);
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender && SesionLogic.UsuarioLogueado == null)
        {
            if (SesionLogic.UsuarioLogueado == null)
            {
                Navigation.NavigateTo("https://localhost:7014/", true);
            }
            firstRender = false;
        }
    }
    
    private void CargarEquipo()
    {
        if (!string.IsNullOrEmpty(_nombreEquipoSeleccionado))
        {
            _equipoSeleccionado = _equipos.FirstOrDefault(e => e.Nombre == _nombreEquipoSeleccionado);
            _paneles = EquipoLogic.ListarPaneles(_equipoSeleccionado.Nombre);
        }
    }
    private void CargarPanel()
    {
        if (!string.IsNullOrEmpty(_nombrePanelSeleccionado))
        {
            _panelSeleccionado = _paneles.FirstOrDefault(p => p.Nombre == _nombrePanelSeleccionado);
            _epicas = PanelLogic.ListarEpicas(_panelSeleccionado.Nombre, _panelSeleccionado.EquipoAlQuePertenece);
            _epicas.Add(new Epica("Sin Epica",(Prioridad.Baja),"desc",new DateTime(2030,12,12)));
        }
    }
    private void CargarTarea()
    {
        if (!string.IsNullOrEmpty(_tituloTareaSeleccionada))
        {
            _tareaSeleccionada = _tareas.FirstOrDefault(t => t.Titulo == _tituloTareaSeleccionada);
        }
    }
    private void EditarTitulo() => _editandoTitulo = true;

    private void GuardarTitulo()
    {
        
        try
        {
            if (_tareaSeleccionada == null)
            {
                _errorMessage = "No se ha seleccionado un usuario.";
                return;
            }

            if (string.IsNullOrEmpty(_nuevoTitulo))
            {
                _errorMessage = "El nuevo titulo no puede estar vacío.";
                return;
            }
            TareaLogic.ModificarTitulo(_tareaSeleccionada.Titulo, _nuevoTitulo);
            _tituloTareaSeleccionada = _nuevoTitulo;
            _editandoTitulo = false;
            _errorMessage = null;
            _successMessage = "Titulo modificado con exito";
        }
        catch (Exception e)
        {
            _errorMessage = e.Message;
            _successMessage = null;
        }
    }
    private void EditarDescripcion() => _editandoDescripcion = true;

    private void GuardarDescripcion()
    {
        try
        {
            if (_tareaSeleccionada == null)
            {
                _errorMessage = "No se ha seleccionado un usuario.";
                return;
            }

            if (string.IsNullOrEmpty(_nuevaDescripcion))
            {
                _errorMessage = "La nueva descripcion no puede estar vacía.";
                return;
            }
            TareaLogic.ModificarDescripcion(_tareaSeleccionada.Titulo, _nuevaDescripcion);
            _tareaSeleccionada.Descripcion = _nuevaDescripcion;
            _editandoDescripcion = false;
            _errorMessage = null;
            _successMessage = "Descripcion modificada con exito";
        }
        catch (Exception e)
        {
            _errorMessage = e.Message;
            _successMessage = null;
        }
    }
    
    private void EditarEsfuerzoInvertido() => _editandoEsfuerzoInvertido = true;
    
    private void GuardarEsfuerzoInvertido()
    {
        try
        {
            if (_tareaSeleccionada == null)
            {
                _errorMessage = "No se ha seleccionado una tarea.";
                return;
            }

            if (_nuevoEsfuerzoInvertido < 0)
            {
                _errorMessage = "El esfuerzo invertido no puede ser negativo.";
                return;
            }
            TareaLogic.ModificarEsfuerzoInvertido(_tareaSeleccionada.Titulo, _nuevoEsfuerzoInvertido);
            _tareaSeleccionada.EsfuerzoInvertido = _nuevoEsfuerzoInvertido;
            _editandoEsfuerzoInvertido = false;
            _errorMessage = null;
            _successMessage = "Esfuerzo invertido modificado con éxito";
        }
        catch (Exception e)
        {
            _errorMessage = e.Message;
            _successMessage = null;
        }
    }
    
    private void CrearComentario()
    {
        try
        {
            TareaLogic.AgregarComentario(_nombreEquipoSeleccionado, _panelSeleccionado.Nombre, _tareaSeleccionada.Titulo, _comentario.Titulo, _comentario.Descripcion, SesionLogic.UsuarioLogueado);
            _errorMessage = null;
            _successMessage = "Comentario agregado con exito";
            _comentario = new Comentario();
            
        }
        catch (Exception e)
        {
            _errorMessage = e.Message;
            _successMessage = null;
        }
    }

    private async Task ResolverComentario(Comentario comentario)
    {
        UsuarioDTO UsuarioLogueadoDto = new UsuarioDTO(SesionLogic.UsuarioLogueado.EsAdmin, SesionLogic.UsuarioLogueado.Nombre, SesionLogic.UsuarioLogueado.Apellido,
            SesionLogic.UsuarioLogueado.Email, SesionLogic.UsuarioLogueado.FechaNacimiento, SesionLogic.UsuarioLogueado.Contrasena);
        
        AgregarComentarioDTO agregarComentarioDto = new AgregarComentarioDTO(_panelSeleccionado.Nombre, _tareaSeleccionada.Titulo, comentario.Titulo, UsuarioLogueadoDto, _equipoSeleccionado.Nombre);
        ComentarioLogic.ResolverComentario(agregarComentarioDto);
    }

    private async Task EliminarTareaSeleccionada()
    {
        try
        {
            PanelLogic.EliminarTarea(_nombreEquipoSeleccionado, _panelSeleccionado.Nombre, _tareaSeleccionada.Titulo, SesionLogic.UsuarioLogueado);
            _tareas.Remove(_tareaSeleccionada);
            _errorMessage = null;
            _successMessage = "Tarea enviada a la papelera con éxito";
            _tareaSeleccionada = null;
            _editandoDescripcion = false;
            _editandoTitulo = false;
        }catch(Exception e)
        {
            _errorMessage = e.Message;
            if (_errorMessage.Equals("La papelera está llena."))
            {
                await MostrarConfirmacionPapeleraLlena();
            }
        }
    }
    
    private async Task MostrarConfirmacionPapeleraLlena()
    {
        bool? resultado = await JsRuntime.InvokeAsync<bool?>("confirm", "La papelera está llena. El elemento se eliminará de forma permanente. Desea continuar?");
        if (resultado == true)
        {
            try
            {
                PanelLogic.EliminarTareaDeFormaPermanente(_nombreEquipoSeleccionado, _panelSeleccionado.Nombre, _tareaSeleccionada.Titulo, SesionLogic.UsuarioLogueado);
                _tareas.Remove(_tareaSeleccionada);
                _panelSeleccionado = null;
                _errorMessage = null;
                _tareaSeleccionada = null;
                _successMessage = "Tarea eliminado con éxito";
            }
            catch (Exception ex)
            {
                _successMessage = null;
                _errorMessage = ex.Message;
            }
        }
    }
    private void CargarEpica()
    {
        if (!string.IsNullOrEmpty(_tituloEpicaSeleccionada))
        {
            _epicaSeleccionada = true;
        }
        if(_tituloEpicaSeleccionada == "Sin Epica")
        {
            _tareas = PanelLogic.ListarTareasSinEpicaAsociada(_panelSeleccionado.Nombre, _panelSeleccionado.EquipoAlQuePertenece);
        }
        else
        {
            _tareas = PanelLogic.ListarTareasPorEpica(_panelSeleccionado.Nombre, _panelSeleccionado.EquipoAlQuePertenece, _tituloEpicaSeleccionada);
        }
    }
}
