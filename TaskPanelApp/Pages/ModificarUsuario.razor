@page "/ModificarUsuario"
@using BusinessLogic.Interfaces
@using Domain
@inject IUsuarioLogic UsuarioLogic
@inject SesionLogic SesionLogic
@inject NavigationManager Navigation


<h3>Modificar usuario</h3>

<div class="mb-3">
    <label for="equipoSelect">Seleccionar Usuario:</label>
    <select id="equipoSelect" class="form-control" @bind="_emailSeleccionado">
        <option value="">Seleccione un usuario</option>
        @foreach (var usuario in _usuarios)
        {
            <option value="@usuario.Email">@usuario.Email</option>
        }
    </select>
</div>

<button class="btn btn-primary" @onclick="CargarUsuario">Cargar Usuario</button>

@if (!string.IsNullOrEmpty(_errorMessage))
{
<div class="alert alert-danger">
    <p>@_errorMessage</p>
</div>
}

@if (!string.IsNullOrEmpty(_successMessage))
{
<div class="alert alert-success">
    <p>@_successMessage</p>
</div>
}

@if (_usuarioSeleccionado != null)
{
    <div class="mb-3">
        <label for="email">Email:</label>
        @if (_editandoEmail)
        {
            <input id="email" type="text" class="form-control" maxlength="50" @bind="_nuevoEmail" required />
            <button class="btn btn-success" @onclick="GuardarEmail">Guardar</button>
        }
        else
        {
            <p>@_usuarioSeleccionado.Email</p>
            <button class="btn btn-primary" @onclick="EditarEmail">Modificar Email</button>
        }
    </div>
    

    <div class="mb-3">
        <label for="nombre">Nombre:</label>
        @if (_editandoNombre)
        {
            <input id="nombre" type="text" class="form-control" maxlength="50" @bind="_nuevoNombre" required />
            <button class="btn btn-success" @onclick="GuardarNombre">Guardar</button>
        }
        else
        {
            <p>@_usuarioSeleccionado.Nombre</p>
            <button class="btn btn-primary" @onclick="EditarNombre">Modificar Nombre</button>
        }
    </div>

    <div class="mb-3">
        <label for="apellido">Apellido:</label>
        @if (_editandoApellido)
        {
            <input id="apellido" type="text" class="form-control" maxlength="50" @bind="_nuevoApellido" required />
            <button class="btn btn-success" @onclick="GuardarApellido">Guardar</button>
        }
        else
        {
            <p>@_usuarioSeleccionado.Apellido</p>
            <button class="btn btn-primary" @onclick="EditarApellido">Modificar Apellido</button>
        }
    </div>

    <div class="mb-3">
        <label for="contrasena">Contraseña:</label>
            <p>********</p>
            <button class="btn btn-primary" @onclick="EditarContrasena">Reiniciar Contraseña</button>
    </div>
    
    @if (!string.IsNullOrEmpty(_nuevaContrasena))
    {
        <div class="mb-3">
            <label for="nuevaContrasena">Nueva Contraseña:</label>
            <p>@_nuevaContrasena</p>
        </div>
    }
    
    <div class="mb-3">
        <label for="fechaNacimiento">Fecha de Nacimiento:</label>
        <p>@_usuarioSeleccionado.FechaNacimiento.ToString("dd/MM/yyyy")</p>
    </div>

    <div class="mb-3">
        <label for="esAdmin">Es Admin:</label>
        @if(_usuarioSeleccionado.EsAdmin)
        {
            <p>Si</p>
        }
        else
        {
            <p>No</p>
        }
    </div>
}

@code {
    private List<Usuario> _usuarios = new List<Usuario>();
    private Usuario? _usuarioSeleccionado;
    private string? _emailSeleccionado, _nuevoEmail, _nuevoNombre, _nuevoApellido, _nuevaContrasena, _errorMessage, _successMessage;
    private bool _editandoEmail, _editandoNombre, _editandoApellido;


    protected override void OnInitialized()
    {
        if(SesionLogic.UsuarioLogueado != null){
           if (SesionLogic.UsuarioLogueado.EsAdmin)
           {
               _usuarios = UsuarioLogic.ListarUsuarios(SesionLogic.UsuarioLogueado);
           }
           else
           {
               _usuarios.Add(SesionLogic.UsuarioLogueado);
           } 
        }
    
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender && SesionLogic.UsuarioLogueado == null)
        {
            if (SesionLogic.UsuarioLogueado == null)
            {
                Navigation.NavigateTo("https://localhost:7014/", true);
            }
            firstRender = false;
        }
    }

    private void CargarUsuario()
    {
        _errorMessage = null;
        _successMessage = null;
        if (!string.IsNullOrEmpty(_emailSeleccionado))
        {
            _usuarioSeleccionado = _usuarios.FirstOrDefault(u => u.Email == _emailSeleccionado);
        }
    }

    private void EditarEmail() => _editandoEmail = true;
    private void GuardarEmail()
    {
        try
        {
            _errorMessage = null;
            _successMessage = null;
            if (_usuarioSeleccionado == null)
            {
                _errorMessage = "No se ha seleccionado un usuario.";
                return;
            }

            if (string.IsNullOrEmpty(_nuevoEmail))
            {
                _errorMessage = "El nuevo email no puede estar vacío.";
                return;
            }

            if (SesionLogic.UsuarioLogueado == null)
            {
                _errorMessage = "El usuario logueado no está disponible.";
                return;
            }
            
            UsuarioLogic.ModificarEmail(_usuarioSeleccionado, SesionLogic.UsuarioLogueado, _nuevoEmail);
            _emailSeleccionado = _nuevoEmail;
            _editandoEmail = false;
            _successMessage = "Email modificado correctamente.";
        }
        catch (Exception e)
        {
            _errorMessage = e.Message;
        }
    }

    private void EditarNombre() => _editandoNombre = true;
    private void GuardarNombre()
    {
        _errorMessage = null;
        _successMessage = null;
        if(string.IsNullOrEmpty(_nuevoNombre))
        {
            _errorMessage = "El nuevo nombre no puede estar vacío.";
            _editandoNombre = false;
            return;
        }
        UsuarioLogic.ModificarNombre(SesionLogic.UsuarioLogueado, _usuarioSeleccionado, _nuevoNombre);
        _editandoNombre = false;
        _successMessage = "Nombre modificado correctamente.";
    }

    private void EditarApellido() => _editandoApellido = true;
    private void GuardarApellido()
    {
        _errorMessage = null;
        _successMessage = null;
        if(string.IsNullOrEmpty(_nuevoApellido))
        {
            _errorMessage = "El nuevo apellido no puede estar vacío.";
            _editandoApellido = false;
            return;
        }
        UsuarioLogic.ModificarApellido(SesionLogic.UsuarioLogueado, _usuarioSeleccionado, _nuevoApellido);
        _editandoApellido = false;
        _successMessage = "Apellido modificado correctamente.";
    }

    private void EditarContrasena()
    { 
        try
        {
            UsuarioLogic.ReiniciarContraseña(SesionLogic.UsuarioLogueado, _usuarioSeleccionado);
            _successMessage = "Contraseña modificada correctamente. La nueva contraseña es: " + _usuarioSeleccionado.Contrasena;
        }
        catch (Exception e)
        {
            _errorMessage = e.Message;
        }
    }
}
