@page "/manejoArchivosImportacion"
@using BusinessLogic
@using Domain
@using BusinessLogic.Interfaces
@inject IEquipoLogic EquipoLogic
@inject IPanelLogic PanelLogic
@inject SesionLogic SesionLogic
@inject NavigationManager Navigation


<h3>ManejoArchivosImportacion</h3>

<div class="mb-3 d-flex align-items-center">
    <label for="equipoSelect" class="me-2">Seleccionar Equipo:</label>
    <select id="equipoSelect" class="form-control me-2" @bind="_nombreEquipoSeleccionado">
        <option value="">Seleccione un equipo</option>
        @foreach (var equipo in _equipos)
        {
        <option value="@equipo.Nombre">@equipo.Nombre</option>
        }
    </select>
    <button class="btn btn-primary" @onclick="CargarEquipo">Cargar Equipo</button>
</div>

@if (_equipoSeleccionado != null)
{
<div class="mb-3 d-flex align-items-center">
    <label for="panelSelect" class="me-2">Seleccionar Panel:</label>
    <select id="panelSelect" class="form-control me-2" @bind="_nombrePanelSeleccionado">
        <option value="">Seleccione un panel</option>
        @foreach (var panel in _paneles.Where(p => p.Nombre != "Tareas Vencidas"))
        {
        <option value="@panel.Nombre">@panel.Nombre</option>
        }
    </select>
    <button class="btn btn-primary" @onclick="CargarPanel">Cargar Panel</button>
</div>
if(_panelSeleccionado != null)
{
<div class="mb-3">
    <label>Nombre: </label>
    <p>@_panelSeleccionado.Nombre</p>
</div>
<div class="mb-3">
    <label>Descripcion: </label>
    <p>@_panelSeleccionado.Descripcion</p>
</div>
<div class="mb-3">
    <label for="fileInput" class="form-label">Importar archivo CSV:</label>
    <InputFile id="fileInput" class="form-control" OnChange="OnFileChange" />
</div>
<div class="mb-3">
    <button class="btn btn-primary" @onclick="ImportarArchivo">Importar Archivo</button>
</div>
}
}
@if (!string.IsNullOrEmpty(_errorMessage))
{
<div class="alert alert-danger">
    <p>@_errorMessage</p>
</div>
}
@if (!string.IsNullOrEmpty(_successMessage))
{
<div class="alert alert-success">
    <p>@_successMessage</p>
</div>
}

@code {
    private List<Equipo> _equipos = new List<Equipo>();
    private string? _nombreEquipoSeleccionado, _nombrePanelSeleccionado;
    private Equipo? _equipoSeleccionado;
    private List<Panel?> _paneles = new List<Panel?>();
    private Panel? _panelSeleccionado;
    private string? _errorMessage, _successMessage;


    protected override void OnInitialized()
    {
        if(SesionLogic.UsuarioLogueado != null)
        {
            _equipos = EquipoLogic.ListarEquipos(SesionLogic.UsuarioLogueado);
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender && SesionLogic.UsuarioLogueado == null)
        {
            if (SesionLogic.UsuarioLogueado == null)
            {
                Navigation.NavigateTo("https://localhost:7014/", true);
            }
            firstRender = false;
        }
    }
    
    private void CargarEquipo()
    {
        if (!string.IsNullOrEmpty(_nombreEquipoSeleccionado))
        {
            if (!string.IsNullOrEmpty(_nombreEquipoSeleccionado))
            {
                _equipoSeleccionado = _equipos.FirstOrDefault(e => e.Nombre == _nombreEquipoSeleccionado);
                _paneles = _equipoSeleccionado.Paneles;
            }
        }
    }
    private void CargarPanel()
    {
        if (!string.IsNullOrEmpty(_nombrePanelSeleccionado))
        {
            _panelSeleccionado = _paneles.FirstOrDefault(p => p.Nombre == _nombrePanelSeleccionado);
        }
    }
    private IBrowserFile? archivoCsv;
    
    private void OnFileChange(InputFileChangeEventArgs e)
    {
        archivoCsv = e.File;
    }
    
    private async Task ImportarArchivo()
    {
        if (archivoCsv != null)
        {
            try
            {
                using var stream = archivoCsv.OpenReadStream();
                using var reader = new StreamReader(stream);
                var content = await reader.ReadToEndAsync();
                
                var lineas = content.Split('\n').Skip(1).ToArray();
                
                foreach (var linea in lineas)
                {
                    var datos = linea.Split(',');
                    if (datos.Length >= 3)
                    {
                        var titulo = datos[0].Trim();
                        var descripcion = datos[1].Trim();
                        if (DateTime.TryParse(datos[2].Trim(), out var fechaExpiracion))
                        {
                            
                            var tarea = new Tarea(titulo, fechaExpiracion, descripcion, 0, _panelSeleccionado, _panelSeleccionado);
                            
                            try
                            {
                                PanelLogic.AgregarTarea(_panelSeleccionado.Nombre, tarea, _panelSeleccionado.EquipoAlQuePertenece);
                            }catch(Exception ex)
                            {
                                await RegistrarErrorEnLog(linea, ex.Message);
                                _errorMessage = $"Error al importar el archivo: {ex.Message}";
                                return;
                            }
                            
                        }
                    }
                }
                _errorMessage = null;
                _successMessage = "Archivo importado con Ã©xito";
            }
            catch (Exception ex)
            {
                _errorMessage = $"Error al importar el archivo: {ex.Message}";
            }
        }
        else
        {
            _errorMessage = "Por favor, seleccione un archivo CSV.";
        }
    }
    private async Task RegistrarErrorEnLog(string lineaOriginal, string mensajeError)
    {
        var nombreArchivo = $"ErroresImport-{SesionLogic.UsuarioLogueado.Nombre}.txt";
        var rutaArchivo = Path.Combine(Directory.GetParent(Directory.GetCurrentDirectory()).FullName, nombreArchivo);
        var mensajeLog = $"{DateTime.UtcNow.ToString("o")}: {lineaOriginal} - {mensajeError}\n";
        File.AppendAllTextAsync(rutaArchivo, mensajeLog);
    }
}